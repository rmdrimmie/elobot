{
  "name": "elo-rank",
  "description": "elo ranking system",
  "version": "0.2.2",
  "private": false,
  "keywords": [
    "elo",
    "rank",
    "ranking",
    "chess"
  ],
  "author": {
    "name": "Daniel Mills"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/dmamills/elo-rank.git"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "test": "make tests"
  },
  "readme": "# Elo-Rank\n\n[![Build Status](https://secure.travis-ci.org/dmamills/elo-rank.png)](http://travis-ci.org/dmamills/elo-rank)\n\nA simple implementation of the elo-ranking system, in javascript.\n\nFor information about elo see [here](http://en.wikipedia.org/wiki/Elo_rating_system)\n\n\n### Usage\n```javascript\n\n//create object with K-Factor(without it defaults to 32)\nvar elo = require('elo-rank')(15);\n\nvar playerA = 1200;\nvar playerB = 1400;\n\n\n//Gets expected score for first parameter\nvar expectedScoreA = elo.getExpected(playerA,playerB);\nvar expectedScoreB = elo.getExpected(playerB,playerA);\n\n//update score, 1 if won 0 if lost\nplayerA = elo.updateRating(expectedScoreA,1,playerA);\nplayerB = elo.updateRating(expectedScoreB,0,playerB);\n```\n\n",
  "readmeFilename": "readme.md",
  "_id": "elo-rank@0.2.2",
  "dist": {
    "shasum": "974d4f6603e9b3cf398ebd1a3c96c06ca23825e1",
    "tarball": "http://registry.npmjs.org/elo-rank/-/elo-rank-0.2.2.tgz"
  },
  "_from": "elo-rank@*",
  "_npmVersion": "1.2.15",
  "_npmUser": {
    "name": "dmamills",
    "email": "mills.dma@gmail.com"
  },
  "maintainers": [
    {
      "name": "dmamills",
      "email": "mills.dma@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "974d4f6603e9b3cf398ebd1a3c96c06ca23825e1",
  "_resolved": "https://registry.npmjs.org/elo-rank/-/elo-rank-0.2.2.tgz"
}
